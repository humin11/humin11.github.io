<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-05T16:48:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Let&#39;s Encrypt SSL证书配置</title>
    <link href="http://yoursite.com/2016/11/06/Let-s-Encrypt-SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/06/Let-s-Encrypt-SSL证书配置/</id>
    <published>2016-11-05T16:45:02.000Z</published>
    <updated>2016-11-05T16:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s Encrypt 介绍<br>Let’s Encrypt 是一个免费、开放，自动化的证书颁发机构，由 ISRG（Internet Security Research Group）运作。</p>
<p>ISRG 是一个关注网络安全的公益组织，其赞助商从非商业组织到财富100强公司都有，包括 Mozilla、Akamai、Cisco、Facebook，密歇根大学等等。ISRG 以消除资金，技术领域的障碍，全面推进加密连接成为互联网标配为自己的使命。</p>
<p>Let’s Encrypt 项目于2012年由 Mozilla 的两个员工发起，2014年11年对外宣布公开，2015年12月3日开启公测。</p>
<p>Let’s Encrypt 目前处于公测期间，文档，工具还不完善，请谨慎用于生产环境。</p>
<p>创建帐号<br>首先创建一个目录，例如 ssl，用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个 RSA 私钥用于 Let’s Encrypt 识别你的身份：<br>openssl genrsa 4096 &gt; account.key<br>创建 CSR 文件<br>接着就可以生成 CSR（Certificate Signing Request，证书签名请求）文件了。在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥），根据证书不同类型，域名私钥也可以选择 RSA 和 ECC 两种不同类型。以下两种方式请根据实际情况二选一。<br>1）创建 RSA 私钥（兼容性好）：<br>openssl genrsa 4096 &gt; domain.key<br>2）创建 ECC 私钥（部分老旧操作系统、浏览器不支持。优点是证书体积小）：<br>BASH</p>
<p>#secp256r1<br>openssl ecparam -genkey -name secp256r1 | openssl ec -out domain.key</p>
<p>#secp384r1<br>openssl ecparam -genkey -name secp384r1 | openssl ec -out domain.key<br>有关 ECC 证书的更多介绍，请点击这里。<br>有了私钥文件，就可以生成 CSR 文件了。在 CSR 中推荐至少把域名带 www 和不带 www 的两种情况都加进去，其它子域可以根据需要添加（目前一张证书最多可以包含 100 个域名）：<br>openssl req -new -sha256 -key domain.key -subj “/“ -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(printf “[SAN]\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com”)) &gt; domain.csr<br>执行这一步时，如果提示找不到 /etc/ssl/openssl.cnf 文件，请看看 /usr/local/openssl/ssl/openssl.cnf 是否存在。如果还是不行，也可以使用交互方式创建 CSR（需要注意 Common Name 必须为你的域名）：<br>openssl req -new -sha256 -key domain.key -out domain.csr<br>配置验证服务<br>我们知道，CA 在签发 DV（Domain Validation）证书时，需要验证域名所有权。传统 CA 的验证方式一般是往 admin@yoursite.com 发验证邮件，而 Let’s Encrypt 是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。<br>首先创建用于存放验证文件的目录，例如：<br>mkdir ~/www/challenges/<br>然后配置一个 HTTP 服务，以 Nginx 为例：<br>NGINX<br>server {<br>    server_name www.yoursite.com yoursite.com;</p>
<pre><code>location ^~ /.well-known/acme-challenge/ {
    alias /home/xxx/www/challenges/;
    try_files $uri =404;
}

location / {
    rewrite ^/(.*)$ https://yoursite.com/$1 permanent;
}
</code></pre><p>}<br>以上配置优先查找 ~/www/challenges/ 目录下的文件，如果找不到就重定向到 HTTPS 地址。这个验证服务以后更新证书还要用到，建议一直保留。<br>获取网站证书<br>先把 acme-tiny 脚本保存到之前的 ssl 目录：<br>wget <a href="https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py" target="_blank" rel="external">https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</a><br>指定账户私钥、CSR 以及验证目录，执行脚本：<br>python acme_tiny.py –account-key ./account.key –csr ./domain.csr –acme-dir ~/www/challenges/ &gt; ./signed.crt<br>如果一切正常，当前目录下就会生成一个 signed.crt，这就是申请好的证书文件。<br>如果你把域名 DNS 解析放在国内，这一步很可能会遇到类似这样的错误：<br>ValueError: Wrote file to /home/xxx/www/challenges/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg, but couldn’t download <a href="http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg" target="_blank" rel="external">http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg</a><br>这是因为你的域名很可能在国外无法解析，可以找台国外 VPS 验证下。我的域名最近从 DNSPod 换到了阿里云解析，最后又换到了 CloudXNS，就是因为最近前两家在国外都很不稳定。如果你也遇到了类似情况，可以暂时使用国外的 DNS 解析服务商，例如 dns.he.net。如果还是搞不定，也可以试试「Neilpang/le」这个工具的 DNS Mode。<br>搞定网站证书后，还要下载 Let’s Encrypt 的中间证书。我在之前的文章中讲过，配置 HTTPS 证书时既不要漏掉中间证书，也不要包含根证书。在 Nginx 配置中，需要把中间证书和网站证书合在一起：<br>wget -O - <a href="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem" target="_blank" rel="external">https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</a> &gt; intermediate.pem<br>cat signed.crt intermediate.pem &gt; chained.pem<br>为了后续能顺利启用 OCSP Stapling，我们再把根证书和中间证书合在一起：<br>wget -O - <a href="https://letsencrypt.org/certs/isrgrootx1.pem" target="_blank" rel="external">https://letsencrypt.org/certs/isrgrootx1.pem</a> &gt; root.pem<br>cat intermediate.pem root.pem &gt; full_chained.pem<br>最终，修改 Nginx 中有关证书的配置并 reload 服务即可：<br>ssl_certificate     ~/www/ssl/chained.pem;<br>ssl_certificate_key ~/www/ssl/domain.key;<br>Nginx 中与 HTTPS 有关的配置项很多，这里不一一列举了。如有需要，请参考本站配置。<br>配置自动更新<br>Let’s Encrypt 签发的证书只有 90 天有效期，推荐使用脚本定期更新。例如我就创建了一个 renew_cert.sh 并通过 chmod a+x renew_cert.sh 赋予执行权限。文件内容如下：<br>BASH</p>
<p>#!/bin/bash</p>
<p>cd /home/xxx/www/ssl/<br>python acme_tiny.py –account-key account.key –csr domain.csr –acme-dir /home/xxx/www/challenges/ &gt; signed.crt || exit<br>wget -O - <a href="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem" target="_blank" rel="external">https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</a> &gt; intermediate.pem<br>cat signed.crt intermediate.pem &gt; chained.pem<br>service nginx reload<br>crontab 中使用绝对路径比较保险，crontab -e 加入以下内容：<br>0 0 1 <em> </em> /home/xxx/shell/renew_cert.sh &gt;/dev/null 2&gt;&amp;1<br>这样以后证书每个月都会自动更新，一劳永逸。实际上，Let’s Encrypt 官方将证书有效期定为 90 天一方面是为了更安全，更重要的是鼓励用户采用自动化部署方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s Encrypt 介绍&lt;br&gt;Let’s Encrypt 是一个免费、开放，自动化的证书颁发机构，由 ISRG（Internet Security Research Group）运作。&lt;/p&gt;
&lt;p&gt;ISRG 是一个关注网络安全的公益组织，其赞助商从非商业组织到财
    
    </summary>
    
    
  </entry>
  
</feed>
