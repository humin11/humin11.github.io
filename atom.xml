<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-05T16:55:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Let&#39;s Encrypt SSL证书配置</title>
    <link href="http://yoursite.com/2016/11/06/Let-s-Encrypt-SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/06/Let-s-Encrypt-SSL证书配置/</id>
    <published>2016-11-05T16:45:02.000Z</published>
    <updated>2016-11-05T16:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Let’s-Encrypt-介绍"><a href="#Let’s-Encrypt-介绍" class="headerlink" title="Let’s Encrypt 介绍"></a>Let’s Encrypt 介绍</h1><p>Let’s Encrypt 是一个免费、开放，自动化的证书颁发机构，由 ISRG（Internet Security Research Group）运作。</p>
<p>ISRG 是一个关注网络安全的公益组织，其赞助商从非商业组织到财富100强公司都有，包括 Mozilla、Akamai、Cisco、Facebook，密歇根大学等等。ISRG 以消除资金，技术领域的障碍，全面推进加密连接成为互联网标配为自己的使命。</p>
<p>Let’s Encrypt 项目于2012年由 Mozilla 的两个员工发起，2014年11年对外宣布公开，2015年12月3日开启公测。</p>
<p>Let’s Encrypt 目前处于公测期间，文档，工具还不完善，请谨慎用于生产环境。</p>
<h1 id="创建帐号"><a href="#创建帐号" class="headerlink" title="创建帐号"></a>创建帐号</h1><p>首先创建一个目录，例如 ssl，用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个 RSA 私钥用于 Let’s Encrypt 识别你的身份：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa 4096 &gt; account.key</div></pre></td></tr></table></figure></p>
<p>创建 CSR 文件<br>接着就可以生成 CSR（Certificate Signing Request，证书签名请求）文件了。在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥），根据证书不同类型，域名私钥也可以选择 RSA 和 ECC 两种不同类型。<br>创建 RSA 私钥（兼容性好）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa 4096 &gt; domain.key</div></pre></td></tr></table></figure></p>
<p>有了私钥文件，就可以生成 CSR 文件了。在 CSR 中推荐至少把域名带 www 和不带 www 的两种情况都加进去，其它子域可以根据需要添加（目前一张证书最多可以包含 100 个域名）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /etc/pki/tls/openssl.cnf &lt;(printf &quot;[SAN]\nsubjectAltName=DNS:lexiang12.com,DNS:www.lexiang12.com&quot;)) &gt; domain.csr</div></pre></td></tr></table></figure></p>
<p>执行这一步时，如果提示找不到 /etc/ssl/openssl.cnf 文件，请看看 /usr/local/openssl/ssl/openssl.cnf 是否存在。</p>
<p>配置验证服务<br>我们知道，CA 在签发 DV（Domain Validation）证书时，需要验证域名所有权。传统 CA 的验证方式一般是往 admin@yoursite.com 发验证邮件，而 Let’s Encrypt 是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。<br>首先创建用于存放验证文件的目录，例如：<br>mkdir /usr/local/nginx/challenges/<br>然后配置一个 HTTP 服务，以 Nginx 为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name www.yoursite.com yoursite.com;</div><div class="line"></div><div class="line">    location ^~ /.well-known/acme-challenge/ &#123;</div><div class="line">        alias /home/xxx/www/challenges/;</div><div class="line">        try_files $uri =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        rewrite ^/(.*)$ https://yoursite.com/$1 permanent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上配置优先查找 /usr/local/nginx/challenges/ 目录下的文件，如果找不到就重定向到 HTTPS 地址。这个验证服务以后更新证书还要用到，建议一直保留。配置后需要重启NGINX服务器。<br>获取网站证书<br>先把 acme-tiny 脚本保存到之前的 ssl 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</div></pre></td></tr></table></figure></p>
<p>指定账户私钥、CSR 以及验证目录，执行脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /usr/local/nginx/challenges/ &gt; ./signed.crt</div></pre></td></tr></table></figure></p>
<p>如果一切正常，当前目录下就会生成一个 signed.crt，这就是申请好的证书文件。</p>
<p>搞定网站证书后，还要下载 Let’s Encrypt 的中间证书。我在之前的文章中讲过，配置 HTTPS 证书时既不要漏掉中间证书，也不要包含根证书。在 Nginx 配置中，需要把中间证书和网站证书合在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</div><div class="line">cat signed.crt intermediate.pem &gt; chained.pem</div></pre></td></tr></table></figure></p>
<p>为了后续能顺利启用 OCSP Stapling，我们再把根证书和中间证书合在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</div><div class="line">cat intermediate.pem root.pem &gt; full_chained.pem</div></pre></td></tr></table></figure></p>
<p>最终，修改 Nginx 中有关证书的配置并 reload 服务即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssl_certificate     ~/www/ssl/chained.pem;</div><div class="line">ssl_certificate_key ~/www/ssl/domain.key;</div></pre></td></tr></table></figure></p>
<h1 id="配置自动更新"><a href="#配置自动更新" class="headerlink" title="配置自动更新"></a>配置自动更新</h1><p>Let’s Encrypt 签发的证书只有 90 天有效期，推荐使用脚本定期更新。例如我就创建了一个 renew_cert.sh 并通过 chmod a+x renew_cert.sh 赋予执行权限。文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> /home/xxx/www/ssl/</div><div class="line">python acme_tiny.py --account-key account.key --csr domain.csr --acme-dir /home/xxx/www/challenges/ &gt; signed.crt || <span class="built_in">exit</span></div><div class="line">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</div><div class="line">cat signed.crt intermediate.pem &gt; chained.pem</div><div class="line">systemctl restart nginx</div></pre></td></tr></table></figure></p>
<p>crontab 中使用绝对路径比较保险，crontab -e 加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 0 1 * * /home/xxx/shell/renew_cert.sh &gt;/dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure></p>
<p>这样以后证书每个月都会自动更新，一劳永逸。实际上，Let’s Encrypt 官方将证书有效期定为 90 天一方面是为了更安全，更重要的是鼓励用户采用自动化部署方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Let’s-Encrypt-介绍&quot;&gt;&lt;a href=&quot;#Let’s-Encrypt-介绍&quot; class=&quot;headerlink&quot; title=&quot;Let’s Encrypt 介绍&quot;&gt;&lt;/a&gt;Let’s Encrypt 介绍&lt;/h1&gt;&lt;p&gt;Let’s Encrypt 
    
    </summary>
    
    
      <category term="Let&#39;s Encrypt" scheme="http://yoursite.com/tags/Let-s-Encrypt/"/>
    
  </entry>
  
</feed>
